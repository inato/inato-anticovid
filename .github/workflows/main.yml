name: CI

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout code
      - uses: actions/setup-node@master
        name: Setup node
        with:
          node-version: "10.x"
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        name: Cache dependencies
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile --prefer-offline && yarn --cwd functions install --frozen-lockfile --prefer-offline
        name: Install dependencies
      - run: yarn lint
        name: Lint app
      - run: yarn test --watchAll=false --passWithNoTests
        name: Test app
      - run: yarn --cwd functions lint
        name: Lint functions
      - run: yarn --cwd functions test
        name: Test functions
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v2
        name: Checkout code
      - uses: actions/setup-node@master
        name: Setup node
        with:
          node-version: "10.x"
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache
        name: Cache dependencies
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile --prefer-offline && cd functions && yarn install --frozen-lockfile --prefer-offline
        name: Install dependencies
      - if: github.ref == 'refs/heads/staging'
        name: Set staging configuration
        run: cp src/config/config.staging.json src/config/config.json
      - if: github.ref == 'refs/heads/master'
        name: Set production configuration
        run: cp src/config/config.prod.json src/config/config.json
      - run: yarn build
        name: Build the app
      - uses: w9jds/firebase-action@master
        name: Use firebase production environment
        if: github.ref == 'refs/heads/master'
        with:
          args: use production
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      - uses: w9jds/firebase-action@master
        name: Use firebase staging environment
        if: github.ref == 'refs/heads/staging'
        with:
          args: use staging
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      - uses: w9jds/firebase-action@master
        name: Deploy to firebase
        with:
          args: deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      - name: Set Algolia settings for staging
        if: github.ref == 'refs/heads/staging'
        run: curl https://us-central1-anticovid-staging.cloudfunctions.net/setAlgoliaSettings
      - name: Set Algolia settings for production
        if: github.ref == 'refs/heads/master'
        run: curl https://us-central1-anticovid.cloudfunctions.net/setAlgoliaSettings
